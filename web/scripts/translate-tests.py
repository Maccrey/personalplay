#!/usr/bin/env python3
"""
ÌÖåÏä§Ìä∏ ÏßàÎ¨∏ Î∞è Í≤∞Í≥ºÎ•º ÏòÅÏñ¥ÏôÄ ÏùºÎ≥∏Ïñ¥Î°ú ÏûêÎèô Î≤àÏó≠
Í∞ÑÎã®Ìïú Îß§Ìïë Í∏∞Î∞ò Î≤àÏó≠ (Ïã§Ï†ú ÌîÑÎ°úÎçïÏÖòÏóêÏÑúÎäî Î≤àÏó≠ API ÏÇ¨Ïö© Í∂åÏû•)
"""

import json
import sys

# Í∏∞Î≥∏ ÏßàÎ¨∏ Î≤àÏó≠ ÏÇ¨Ï†Ñ (ÏûêÏ£º ÏÇ¨Ïö©ÎêòÎäî Ìå®ÌÑ¥)
COMMON_TRANSLATIONS = {
    'en': {
        'Îç∞Ïù¥Ìä∏Ïóê Î®ºÏ†Ä Ïó∞ÎùΩÌïòÎÇòÏöî?': 'Do you contact first for a date?',
        'ÏÑ†Î¨ºÏóê Ïã†Í≤ΩÏùÑ Ïì∞ÎÇòÏöî?': 'Do you care about gifts?',
        'Ïã∏ÏõÄ ÌõÑ Î®ºÏ†Ä ÌôîÌï¥ÌïòÎÇòÏöî?': 'Do you reconcile first after a fight?',
        'Í∏∞ÎÖêÏùºÏùÑ Íº≠ Ï±ôÍ∏∞ÎÇòÏöî?': 'Do you always remember anniversaries?',
        'Ïó∞Ïù∏Ïùò SNSÎ•º ÏûêÏ£º ÌôïÏù∏ÌïòÎÇòÏöî?': 'Do you often check your partner\'s SNS?',
        'Ïä§ÌÇ®Ïã≠ÏùÑ Ï¢ãÏïÑÌïòÎÇòÏöî?': 'Do you like physical affection?',
        'Îç∞Ïù¥Ìä∏ ÏΩîÏä§Î•º ÏßÅÏ†ë Í≥ÑÌöçÌïòÎÇòÏöî?': 'Do you plan date courses yourself?',
        'Ïó∞Ïù∏Ïùò Í≥ºÍ±∞Í∞Ä Í∂ÅÍ∏àÌïúÍ∞ÄÏöî?': 'Are you curious about your partner\'s past?',
        'ÏßàÌà¨Î•º ÎßéÏù¥ ÌïòÎÇòÏöî?': 'Do you get jealous often?',
        'Ïó∞Ïï† Ï§ëÏóêÎèÑ Í∞úÏù∏ ÏãúÍ∞ÑÏù¥ ÌïÑÏöîÌïúÍ∞ÄÏöî?': 'Do you need personal time even while dating?',
        'Ïó∞Ïù∏ÏóêÍ≤å ÏûêÏ£º ÏÇ¨ÎûëÌïúÎã§Í≥† ÎßêÌïòÎÇòÏöî?': 'Do you often say "I love you" to your partner?',
        'Ïó∞Ïù∏Ïùò ÏπúÍµ¨Îì§Í≥º ÏπúÌï¥ÏßÄÎ†§Í≥† ÎÖ∏Î†•ÌïòÎÇòÏöî?': 'Do you try to get along with your partner\'s friends?',
    },
    'ja': {
        'Îç∞Ïù¥Ìä∏Ïóê Î®ºÏ†Ä Ïó∞ÎùΩÌïòÎÇòÏöî?': '„Éá„Éº„Éà„ÅÆÈÄ£Áµ°„ÅØÂÖà„Å´„Åó„Åæ„Åô„ÅãÔºü',
        'ÏÑ†Î¨ºÏóê Ïã†Í≤ΩÏùÑ Ïì∞ÎÇòÏöî?': '„Éó„É¨„Çº„É≥„Éà„Å´Ê∞ó„Çí‰Ωø„ÅÑ„Åæ„Åô„ÅãÔºü',
        'Ïã∏ÏõÄ ÌõÑ Î®ºÏ†Ä ÌôîÌï¥ÌïòÎÇòÏöî?': 'ÂñßÂò©„ÅÆÂæå„ÄÅÂÖà„Å´‰ª≤Áõ¥„Çä„Åó„Åæ„Åô„ÅãÔºü',
        'Í∏∞ÎÖêÏùºÏùÑ Íº≠ Ï±ôÍ∏∞ÎÇòÏöî?': 'Ë®òÂøµÊó•„ÅØÂøÖ„ÅöË¶ö„Åà„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
        'Ïó∞Ïù∏Ïùò SNSÎ•º ÏûêÏ£º ÌôïÏù∏ÌïòÎÇòÏöî?': 'ÊÅã‰∫∫„ÅÆSNS„Çí„Çà„Åè„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åæ„Åô„ÅãÔºü',
        'Ïä§ÌÇ®Ïã≠ÏùÑ Ï¢ãÏïÑÌïòÎÇòÏöî?': '„Çπ„Ç≠„É≥„Ç∑„ÉÉ„Éó„ÅåÂ•Ω„Åç„Åß„Åô„ÅãÔºü',
        'Îç∞Ïù¥Ìä∏ ÏΩîÏä§Î•º ÏßÅÏ†ë Í≥ÑÌöçÌïòÎÇòÏöî?': '„Éá„Éº„Éà„Ç≥„Éº„Çπ„ÇíËá™ÂàÜ„ÅßË®àÁîª„Åó„Åæ„Åô„ÅãÔºü',
        'Ïó∞Ïù∏Ïùò Í≥ºÍ±∞Í∞Ä Í∂ÅÍ∏àÌïúÍ∞ÄÏöî?': 'ÊÅã‰∫∫„ÅÆÈÅéÂéª„ÅåÊ∞ó„Å´„Å™„Çä„Åæ„Åô„ÅãÔºü',
        'ÏßàÌà¨Î•º ÎßéÏù¥ ÌïòÎÇòÏöî?': 'Â´âÂ¶¨„Çí„Çà„Åè„Åó„Åæ„Åô„ÅãÔºü',
        'Ïó∞Ïï† Ï§ëÏóêÎèÑ Í∞úÏù∏ ÏãúÍ∞ÑÏù¥ ÌïÑÏöîÌïúÍ∞ÄÏöî?': 'ÊÅãÊÑõ‰∏≠„Åß„ÇÇÂÄã‰∫∫„ÅÆÊôÇÈñì„ÅåÂøÖË¶Å„Åß„Åô„ÅãÔºü',
        'Ïó∞Ïù∏ÏóêÍ≤å ÏûêÏ£º ÏÇ¨ÎûëÌïúÎã§Í≥† ÎßêÌïòÎÇòÏöî?': 'ÊÅã‰∫∫„Å´È†ªÁπÅ„Å´ÊÑõ„Åó„Å¶„ÅÑ„Çã„Å®Ë®Ä„ÅÑ„Åæ„Åô„ÅãÔºü',
        'Ïó∞Ïù∏Ïùò ÏπúÍµ¨Îì§Í≥º ÏπúÌï¥ÏßÄÎ†§Í≥† ÎÖ∏Î†•ÌïòÎÇòÏöî?': 'ÊÅã‰∫∫„ÅÆÂèãÈÅî„Å®‰ª≤ËâØ„Åè„Åó„Çà„ÅÜ„Å®Âä™Âäõ„Åó„Åæ„Åô„ÅãÔºü',
    }
}

# ÏùºÎ∞òÏ†ÅÏù∏ ÏßàÎ¨∏ Ìå®ÌÑ¥ Î≤àÏó≠
def translate_question(question, lang):
    """ÏßàÎ¨∏ÏùÑ Î≤àÏó≠ (Îß§Ìïë Í∏∞Î∞ò + Ìå®ÌÑ¥ Í∏∞Î∞ò)"""

    # ÏßÅÏ†ë Îß§ÌïëÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
    if question in COMMON_TRANSLATIONS.get(lang, {}):
        return COMMON_TRANSLATIONS[lang][question]

    # Ìå®ÌÑ¥ Í∏∞Î∞ò Î≤àÏó≠
    if lang == 'en':
        # ÌïúÍµ≠Ïñ¥ ‚Üí ÏòÅÏñ¥ Ìå®ÌÑ¥
        patterns = [
            ('~ÎÇòÏöî?', ''),
            ('~ÌïòÎÇòÏöî?', ''),
            ('Î®ºÏ†Ä', 'first'),
            ('ÏûêÏ£º', 'often'),
            ('ÎßéÏù¥', 'a lot'),
            ('Íº≠', 'always'),
        ]

        # Í∞ÑÎã®Ìïú Î≤àÏó≠ (Ïã§Ï†úÎ°úÎäî Îçî Ï†ïÍµêÌïú Î≤àÏó≠ ÌïÑÏöî)
        if 'ÎÇòÏöî?' in question or 'ÌïòÎÇòÏöî?' in question:
            return f"Do you {question.replace('ÎÇòÏöî?', '').replace('ÌïòÎÇòÏöî?', '')}?"

    elif lang == 'ja':
        # ÌïúÍµ≠Ïñ¥ ‚Üí ÏùºÎ≥∏Ïñ¥ Ìå®ÌÑ¥
        if 'ÎÇòÏöî?' in question or 'ÌïòÎÇòÏöî?' in question:
            return f"{question.replace('ÎÇòÏöî?', '').replace('ÌïòÎÇòÏöî?', '')}„ÅãÔºü"

    # Î≤àÏó≠ÏùÑ Ï∞æÏßÄ Î™ªÌïòÎ©¥ ÏõêÎ¨∏ Î∞òÌôò (ÎÇòÏ§ëÏóê ÏàòÎèô Î≤àÏó≠ ÌïÑÏöî ÌëúÏãú)
    return f"[TODO: {question}]"

def translate_tests():
    """Î™®Îì† ÌÖåÏä§Ìä∏ Î≤àÏó≠"""

    # ÌïúÍµ≠Ïñ¥ ÏõêÎ≥∏ ÏùΩÍ∏∞
    with open('locales/ko.json', 'r', encoding='utf-8') as f:
        ko = json.load(f)

    # ÏòÅÏñ¥ ÌååÏùº ÏùΩÍ∏∞
    with open('locales/en.json', 'r', encoding='utf-8') as f:
        en = json.load(f)

    # ÏùºÎ≥∏Ïñ¥ ÌååÏùº ÏùΩÍ∏∞
    with open('locales/ja.json', 'r', encoding='utf-8') as f:
        ja = json.load(f)

    print("üåç Starting translation...\n")

    translated_count = 0
    todo_count = 0

    # Í∞Å ÌÖåÏä§Ìä∏Ïóê ÎåÄÌï¥
    for test_id, test_data in ko.get('tests', {}).items():
        ko_questions = test_data.get('questions', [])

        # ÏòÅÏñ¥ Î≤àÏó≠
        en_questions = []
        for q in ko_questions:
            translated = translate_question(q, 'en')
            en_questions.append(translated)
            if '[TODO:' in translated:
                todo_count += 1
            else:
                translated_count += 1

        # ÏùºÎ≥∏Ïñ¥ Î≤àÏó≠
        ja_questions = []
        for q in ko_questions:
            translated = translate_question(q, 'ja')
            ja_questions.append(translated)
            if '[TODO:' in translated:
                todo_count += 1
            else:
                translated_count += 1

        # ÏòÅÏñ¥ ÌååÏùº ÏóÖÎç∞Ïù¥Ìä∏
        if test_id in en['tests']:
            en['tests'][test_id]['questions'] = en_questions

        # ÏùºÎ≥∏Ïñ¥ ÌååÏùº ÏóÖÎç∞Ïù¥Ìä∏
        if test_id in ja['tests']:
            ja['tests'][test_id]['questions'] = ja_questions

        if int(test_id) % 10 == 0:
            print(f"‚úì Translated test {test_id}/60")

    # ÌååÏùº Ï†ÄÏû•
    with open('locales/en.json', 'w', encoding='utf-8') as f:
        json.dump(en, f, ensure_ascii=False, indent=2)

    with open('locales/ja.json', 'w', encoding='utf-8') as f:
        json.dump(ja, f, ensure_ascii=False, indent=2)

    print(f"\n‚úÖ Translation completed!")
    print(f"   - Translated: {translated_count} questions")
    print(f"   - TODO (manual translation needed): {todo_count} questions")
    print(f"\nüìù Files updated:")
    print(f"   - locales/en.json")
    print(f"   - locales/ja.json")

    if todo_count > 0:
        print(f"\n‚ö†Ô∏è  {todo_count} questions need manual translation (marked with [TODO:])")

if __name__ == '__main__':
    translate_tests()
